#include "account.hpp"
#include "bank.hpp"
#include "format.hpp"
#include "parse.hpp"
#include "stream.hpp"

#include <sbash64/testcpplite/testcpplite.hpp>

#include <iostream>

namespace sbash64::budget {
static auto runAllTests() -> int {
  return testcpplite::test(
      {{parses::zeroDollars, "parses \"0\" as $0"},
       {parses::oneDollar, "parses \"1\" as $1"},
       {parses::oneDollarTwentyThreeCents, "parses \"1.23\" as $1.23"},
       {parses::oneDollarTwentyCentsWithoutTrailingZero,
        "parses \"1.2\" as $1.20"},
       {parses::oneCent, "parses \"0.01\" as 1¢"},
       {parses::tenCents, "parses \"0.10\" as 10¢"},
       {parses::twelveCentsWithoutLeadingZero, "parses \".12\" as 12¢"},
       {parses::twelveCentsIgnoringThirdDecimalPlace,
        "parses \"0.12X\" as 12¢"},
       {parses::oneCentIgnoringThirdDecimalPlace, "parses \"0.01X\" as 1¢"},
       {formats::zeroDollars, "formats 0¢ as \"$0.00\""},
       {formats::oneDollar, "formats $1 as \"$1.00\""},
       {formats::oneCent, "formats 1¢ as \"$0.01\""},
       {formats::tenCents, "formats 10¢ as \"$0.10\""},
       {formats::negativeOneDollarThirtyFourCents,
        "formats minus $1.34 as \"$-1.34\""},
       {formats::negativeFifteenCents, "formats minus 15¢ as \"$-0.15\""},
       {stream::fromTransaction, "streams from transaction"},
       {stream::fromVerifiedTransaction, "streams from verified transaction"},
       {stream::toTransaction, "streams to transaction"},
       {stream::toVerifiedTransaction, "streams to verified transaction"},
       {stream::fromAccount, "streams from account"},
       {stream::beforeFinalToAccount, "streams to account"},
       {stream::finalToAccount, "stream loads accounts 2"},
       {stream::fromBudget, "stream saves session"},
       {stream::toBudget, "stream loads session"},
       {bank::createsMasterAccountOnConstruction,
        "bank creates master account on construction"},
       {bank::createsAccount, "bank creates account"},
       {bank::creditsMasterAccountWhenCredited,
        "bank credits master account when credited"},
       {bank::verifiesCreditForMasterAccount,
        "bank verifies credit for master account"},
       {bank::createsAccountWhenDebitingNonexistent,
        "bank creates account when debiting nonexistent"},
       {bank::debitsExistingAccount, "bank debits existing account"},
       {bank::removesDebitFromAccount,
        "bank removes transactions from accounts"},
       {bank::verifiesDebitForExistingAccount,
        "bank verifies debit for existing account"},
       {bank::doesNothingWhenRemovingDebitFromNonexistentAccount,
        "bank does nothing when removing debit from nonexistent account"},
       {bank::removesFromMasterAccountWhenRemovingCredit,
        "bank removes from master account when removing credit"},
       {bank::transferDebitsMasterAndCreditsOther,
        "bank transfer debits master and credits other"},
       {bank::transferVerifiesTransactionsByDefault,
        "bank transfer verifies transactions by default"},
       {bank::removeTransferRemovesDebitFromMasterAndCreditFromOther,
        "bank remove transfer removes debit from master and credit from "
        "other"},
       {bank::showShowsAccountsInAlphabeticOrder, "bank show shows accounts"},
       {bank::saveSavesAccounts, "bank save saves accounts"},
       {bank::loadLoadsAccounts, "bank load loads accounts"},
       {bank::renameAccount, "bank rename account"},
       {bank::notifiesObserverOfNewAccount,
        "bank notifies observer of new account"},
       {bank::notifiesObserverOfRemovedAccount,
        "bank notifies observer of removed account"},
       {bank::reduceReducesEachAccount, "bank reduce reduces each account"},
       {bank::notifiesThatTotalBalanceHasChangedOnCredit,
        "bank notifies that total balance has changed on credit"},
       {bank::notifiesThatTotalBalanceHasChangedOnRemoveAccount,
        "bank notifies that total balance has changed on remove account"},
       {bank::removesAccount, "bank removes account"},
       {bank::closesAccount, "bank closes account"},
       {bank::closesAccountHavingNegativeBalance,
        "bank closes account having negative balance"},
       {account::notifiesObserverOfUpdatedBalanceAfterAddingTransactions,
        "notifiesObserverOfUpdatedBalanceAfterAddingTransactions"},
       {account::notifiesObserverOfUpdatedBalanceAfterRemovingTransactions,
        "notifiesObserverOfUpdatedBalanceAfterRemovingTransactions"},
       {account::savesAllTransactionRecordsAndAccountName,
        "savesAllTransactionRecordsAndAccountName"},
       {account::savesRemainingTransactionRecordsAfterRemovingSome,
        "savesRemainingTransactionRecordsAfterRemovingSome"},
       {account::initializesTransactionRecords,
        "initializesTransactionRecords"},
       {account::passesSelfToDeserializationOnLoad,
        "passesSelfToDeserializationOnLoad"},
       {account::passesNewTransactionRecordsToDeserialization,
        "passesNewTransactionRecordsToDeserialization"},
       {account::savesTransactionRecordsLoaded,
        "savesTransactionRecordsLoaded"},
       {account::rename, "rename"},
       {account::savesDuplicateTransactionRecords,
        "savesDuplicateTransactionRecords"},
       {account::savesRemainingTransactionRecordsAfterRemovingVerified,
        "savesRemainingTransactionRecordsAfterRemovingVerified"},
       {account::notifiesDuplicateTransactionsAreVerified,
        "notifiesDuplicateTransactionsAreVerified"},
       {account::notifiesObserverOfNewCredit, "notifiesObserverOfNewCredit"},
       {account::notifiesObserverOfNewDebit, "notifiesObserverOfNewDebit"},
       {account::notifiesCreditIsVerified, "notifiesCreditIsVerified"},
       {account::notifiesDebitIsVerified, "notifiesDebitIsVerified"},
       {account::notifiesObserverOfRemovedDebit,
        "notifiesObserverOfRemovedDebit"},
       {account::notifiesObserverOfRemovedCredit,
        "notifiesObserverOfRemovedCredit"},
       {account::reduceReducesToOneTransaction,
        "reduceReducesToOneTransaction"},
       {account::notifiesObserverOfTransactionsWhenReducing,
        "notifiesObserverOfTransactionsWhenReducing"},
       {account::returnsBalance, "returnsBalance"},
       {account::reduceReducesToOneDebitForNegativeBalance,
        "reduceReducesToOneDebitForNegativeBalance"},
       {account::notifiesObserverWhenVerified, "notifiesObserverWhenVerified"},
       {account::saveAfterVerify, "saveAfterVerify"},
       {account::notifiesObserverWhenRemoved, "notifiesObserverWhenRemoved"},
       {account::savesWhatWasLoaded, "savesWhatWasLoaded"},
       {account::loadPassesSelfToDeserialization,
        "loadPassesSelfToDeserialization"},
       {account::notifiesThatIsAfterReady, "notifiesThatIsAfterReady"},
       {account::notifiesThatIsAfterInitialize,
        "notifiesThatIsAfterInitialize"}},
      std::cout);
}
} // namespace sbash64::budget

auto main() -> int { return sbash64::budget::runAllTests(); }
